package be.helha.labos.DBNosql;

import be.helha.labos.DB.Connexion_DB;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.mongodb.MongoClientSettings;
import com.mongodb.client.*;
import org.bson.codecs.configuration.CodecRegistry;
import org.bson.codecs.pojo.PojoCodecProvider;

import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.sql.Connection;

import static org.bson.codecs.configuration.CodecRegistries.fromProviders;
import static org.bson.codecs.configuration.CodecRegistries.fromRegistries;

public class Connexion_DB_Nosql {

    private static Connexion_DB_Nosql instance;  // Singleton
    private MongoClient mongoClient;
    private MongoDatabase database;

    CodecRegistry pojoCodecRegistry = fromRegistries(
            MongoClientSettings.getDefaultCodecRegistry(),
            fromProviders(PojoCodecProvider.builder().automatic(true).build())
    );

    private static final String CONFIG_FILE = "config.json"; // Chemin relatif dans src/main/resources

    private ConfigWrapper.DBConfig chargerConfiguration(String key) {
        InputStream is = getClass().getClassLoader().getResourceAsStream(CONFIG_FILE);
        InputStreamReader reader = new InputStreamReader(is);
        JsonObject json = JsonParser.parseReader(reader).getAsJsonObject();

        // Accéder à l'objet "Databases" puis à la clé spécifique
        JsonObject databases = json.getAsJsonObject("Databases");
        JsonObject conf = databases.getAsJsonObject(key);

        if (conf == null) {
            throw new IllegalArgumentException("La configuration pour '" + key + "' est introuvable dans 'Databases'.");
        }
        return new Gson().fromJson(conf, ConfigWrapper.DBConfig.class);
    }

    // Constructeur privé pour empêcher l'instanciation directe
    private Connexion_DB_Nosql() {

        ConfigWrapper.DBConfig config = chargerConfiguration("nosqlTest");

        String uri = "mongodb://" + config.getDBCredentials().getHost() + ":27017";

        mongoClient = MongoClients.create(uri);
        database = mongoClient.getDatabase(config.getDBCredentials().getDatabase())
                .withCodecRegistry(pojoCodecRegistry);
    }

    // Méthode pour obtenir l'instance unique du Singleton
    public static synchronized Connexion_DB_Nosql getInstance(){
        if (instance == null) {
            instance = new Connexion_DB_Nosql();
        }
        return instance;
    }

    // Méthode pour récupérer la base de données
    public MongoDatabase getDatabase() {
        return database;
    }

    // Méthode pour fermer la connexion proprement
    public void closeConnection() {
        if (mongoClient != null) {
            mongoClient.close();
            System.out.println("Connexion MongoDB fermée.");
        }
    }
}